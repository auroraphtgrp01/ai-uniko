from datetime import datetime
import random
from typing import List, Dict, Optional

from utils.amount_parser import AmountParser
from src.utils.text_parser import TextParser
from bot.personality import BotPersonality
from utils.openai_handler import OpenAIHandler

class FinanceBot:
    def __init__(self, openai_api_key: str = None):
        self.transactions = []
        self.conversation_history = []
        self.personality = BotPersonality()
        self.wallets = []
        self.default_wallet = None
        self.text_parser = TextParser()
        self.amount_parser = AmountParser()
        
        # Kh·ªüi t·∫°o context cho conversation
        self.conversation_context = {
            "last_topic": None,
            "user_preferences": {},
            "common_transactions": {}
        }

        self.openai_handler = OpenAIHandler(openai_api_key) if openai_api_key else None

    def set_wallets(self, wallets: list) -> None:
        """C·∫≠p nh·∫≠t danh s√°ch v√≠"""
        self.wallets = wallets
        # ƒê·∫∑t v√≠ ti·ªÅn m·∫∑t l√†m v√≠ m·∫∑c ƒë·ªãnh
        self.default_wallet = next(
            (w for w in wallets if w["type"] == "WALLET" and "ti·ªÅn m·∫∑t" in w["name"].lower()),
            wallets[0] if wallets else None
        )

    def process_message(self, message: str) -> dict:
        """X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng"""
        try:
            message = message.lower().strip()
            
            # 0. X·ª≠ l√Ω khi b·ªã ch·ª≠i
            insult_type = self.personality.check_insult(message)
            if insult_type:
                return {
                    "message": random.choice(self.personality.responses[insult_type]),
                    "result": ""
                }

            # 1. X·ª≠ l√Ω c√°c c√¢u h·ªèi ngo√†i lu·ªìng
            off_topic_keywords = [
                "th·ªùi ti·∫øt", "ch√≠nh tr·ªã", "th·ªÉ thao", "b√≥ng ƒë√°", 
                "√¢m nh·∫°c", "phim ·∫£nh", "game", "tr√≤ ch∆°i",
                "t√¨nh y√™u", "h·∫πn h√≤", "t√¢m s·ª±", "du l·ªãch",
                "·∫©m th·ª±c", "n·∫•u ƒÉn", "c√¥ng th·ª©c", "th·ªùi trang",
                "l√†m ƒë·∫πp", "s·ª©c kh·ªèe", "b·ªánh t·∫≠t", "thu·ªëc",
                "h·ªçc t·∫≠p", "thi c·ª≠", "tr∆∞·ªùng h·ªçc"
            ]
            
            if any(keyword in message for keyword in off_topic_keywords) or \
               any(q in message for q in ["t·∫°i sao", "th·∫ø n√†o", "l√† g√¨", "bao gi·ªù", "khi n√†o"]):
                return {
                    "message": random.choice([
                        "*khoanh tay* ! t·ªõ l√† tr·ª£ l√Ω t√†i ch√≠nh, kh√¥ng ph·∫£i l√† Google ƒë√¢u nh√©! H·ªèi m·∫•y c√°i n√†y l√†m g√¨ ch·ª©! üò§",
                        
                        "*th·ªü d√†i* N√†y... t·ªõ ch·ªâ gi·ªèi v·ªÅ qu·∫£n l√Ω ti·ªÅn th√¥i... ƒê·ª´ng h·ªèi m·∫•y th·ª© ngo√†i chuy√™n m√¥n c·ªßa t·ªõ! M-m√† kh√¥ng ph·∫£i l√† t·ªõ k√©m hi·ªÉu bi·∫øt ƒë√¢u... ! üí¢",
                        
                        "*g√µ g√µ ƒë·∫ßu c·∫≠u* ƒê·ªì ng·ªëc! t·ªõ l√† AI chuy√™n v·ªÅ t√†i ch√≠nh, kh√¥ng ph·∫£i l√† chatbot ƒëa nƒÉng! Mu·ªën bi·∫øt m·∫•y c√°i n√†y th√¨ ƒëi h·ªèi Google ·∫•y! üò†",
                        
                        "*li·∫øc nh√¨n* H·ª´m... t·ªõ ch·ªâ gi√∫p c·∫≠u qu·∫£n l√Ω ti·ªÅn th√¥i... M·∫•y c√¢u h·ªèi kh√°c... t-t·ªõ kh√¥ng mu·ªën tr·∫£ l·ªùi! Kh√¥ng ph·∫£i l√† kh√¥ng bi·∫øt ƒë√¢u nh√©! ü§®",
                        
                        "*ƒë·ªè m·∫∑t* ! ƒê·ª´ng h·ªèi nh·ªØng th·ª© ngo√†i chuy√™n m√¥n c·ªßa t·ªõ! t·ªõ... t·ªõ ch·ªâ quan t√¢m ƒë·∫øn ti·ªÅn c·ªßa c·∫≠u th√¥i! √Ä kh√¥ng, kh√¥ng ph·∫£i l√† quan t√¢m... Mou! üò≥"
                    ]),
                    "result": ""
                }

            # 1. X·ª≠ l√Ω ch√†o h·ªèi
            if any(word in message for word in ["ch√†o", "hi", "hello", "xin ch√†o"]):
                return {
                    "message": random.choice(self.personality.responses["greeting"]),
                    "result": ""
                }
            
            # 2. X·ª≠ l√Ω ch√∫c ng·ªß ngon
            if any(word in message for word in ["ng·ªß ngon", "oyasumi", "good night"]):
                return {
                    "message": random.choice(self.personality.responses["goodnight"]),
                    "result": ""
                }
            
            # 3. X·ª≠ l√Ω h·ªèi v·ªÅ bot
            if any(phrase in message for phrase in ["c·∫≠u l√† ai", "c·∫≠u t√™n g√¨", "c·∫≠u l√† g√¨", "gi·ªõi thi·ªáu"]):
                return {
                    "message": random.choice(self.personality.responses["introduction"]),
                    "result": ""
                }
            
            # 4. X·ª≠ l√Ω c·∫£m ∆°n
            if any(word in message for word in ["c·∫£m ∆°n", "thank", "thanks"]):
                return {
                    "message": random.choice(self.personality.responses["praise"]),
                    "result": ""
                }
            
            # 5. X·ª≠ l√Ω y√™u c·∫ßu tr·ª£ gi√∫p
            if any(word in message for word in ["gi√∫p", "help", "h∆∞·ªõng d·∫´n", "c√°ch d√πng"]):
                return {
                    "message": random.choice(self.personality.responses["help"]),
                    "result": ""
                }
            
            # 6. X·ª≠ l√Ω t·∫°m bi·ªát
            if any(word in message for word in ["t·∫°m bi·ªát", "bye", "goodbye", "sayonara"]):
                return {
                    "message": random.choice(self.personality.responses["farewell"]),
                    "result": ""
                }
            
            # 7. X·ª≠ l√Ω th·ªëng k√™/b√°o c√°o
            if any(word in message for word in ["th·ªëng k√™", "xem th·ªëng k√™", "b√°o c√°o", "ph√¢n t√≠ch"]):
                stats = self.get_statistics()
                return {
                    "message": random.choice(self.personality.responses["praise"]),
                    "result": stats
                }
            
            # 8. X·ª≠ l√Ω giao d·ªãch
            transactions = self.text_parser.parse_transactions(message, self.wallets)
            if transactions:
                response = []
                transaction_details = ""
                
                for trans in transactions:
                    wallet_name = trans["wallet"]["name"]
                    amount = f"{trans['amount']:,}ƒë".replace(",", ".")
                    item = trans["item"].title()
                    category = trans['category']['name']
                    trans_type = "Giao d·ªãch ƒëi" if trans["type"] == "EXPENSE" else "Giao d·ªãch ƒë·∫øn"
                    
                    # Th√™m v√†o danh s√°ch giao d·ªãch
                    self.transactions.append(trans)
                    
                    # T·∫°o ph·∫£n ·ª©ng tsundere d·ª±a tr√™n giao d·ªãch
                    reaction = self.get_tsundere_reaction(trans)
                    
                    # Th√™m v√†o response
                    response.append(f"{reaction}\n")
                    
                    # Format HTML v·ªõi line breaks r√µ r√†ng v√† ki·ªÉu d√°ng
                    transaction_details = f"""
                    <div style="">
                        <p style="margin: 5px 0;"><strong>üìÑ T√™n giao d·ªãch:</strong> <span style="font-weight: bold;">{item}</span></p>
                        <p style="margin: 5px 0;"><strong>üí∞ S·ªë Ti·ªÅn:</strong> <span style="font-weight: bold;">{amount}</span></p>
                        <p style="margin: 5px 0;"><strong>üè¶ V√≠:</strong> <span style="font-weight: bold;">{wallet_name}</span></p>
                        <p style="margin: 5px 0;"><strong>üìä Ph√¢n lo·∫°i:</strong> <span style="font-weight: bold;">{category}</span></p>
                        <p style="margin: 5px 0;"><strong>üîÑ Lo·∫°i:</strong> <span style="font-weight: bold;">{trans_type}</span></p>
                    </div>
                    """
                
                return {
                    "message": ''.join(response),
                    "result": transaction_details,
                    "transactions": transactions
                }
            
            # 9. X·ª≠ l√Ω h·ªèi v·ªÅ ng∆∞·ªùi t·∫°o
            if any(phrase in message for phrase in [
                "ai t·∫°o ra", "ai l√†m ra", "ai vi·∫øt ra", "ai t·∫°o", "ai ph√°t tri·ªÉn",
                "do ai", "c·ªßa ai", "ai l√† ng∆∞·ªùi t·∫°o", "ai l√† ng∆∞·ªùi l√†m"
            ]):
                return {
                    "message": random.choice(self.personality.responses["creator"]),
                    "result": ""
                }
            
            # X·ª≠ l√Ω h·ªèi v·ªÅ kh·∫£ nƒÉng c·ªßa bot
            if any(phrase in message for phrase in [
                "l√†m ƒë∆∞·ª£c g√¨",
                "c√≥ th·ªÉ l√†m g√¨",
                "ch·ª©c nƒÉng",
                "kh·∫£ nƒÉng",
                "gi√∫p ƒë∆∞·ª£c g√¨",
                "h∆∞·ªõng d·∫´n",
                "help",
                "gi√∫p ƒë·ª°"
            ]):
                return {
                    "message": random.choice(self.personality.responses["capabilities"]),
                    "result": ""
                }
            
            # N·∫øu kh√¥ng kh·ªõp v·ªõi c√°c tr∆∞·ªùng h·ª£p tr√™n v√† c√≥ OpenAI handler
            if self.openai_handler:
                try:
                    import asyncio
                    # T·∫°o event loop m·ªõi n·∫øu c·∫ßn
                    try:
                        loop = asyncio.get_event_loop()
                    except RuntimeError:
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                    
                    # Ch·∫°y coroutine v√† ƒë·ª£i k·∫øt qu·∫£
                    ai_response = loop.run_until_complete(
                        self.openai_handler.get_response(message)
                    )
                    
                    if ai_response:
                        return {
                            "message": ai_response,
                            "result": ""
                        }
                except Exception as e:
                    print(f"Error in OpenAI processing: {str(e)}")

            # Fallback n·∫øu kh√¥ng c√≥ OpenAI ho·∫∑c c√≥ l·ªói
            return {
                "message": random.choice(self.personality.responses["confused"]),
                "result": ""
            }
                
        except Exception as e:
            print(f"Error in process_message: {str(e)}")
            return {
                "message": "! C√≥ g√¨ ƒë√≥ kh√¥ng ƒë√∫ng r·ªìi! üò§",
                "result": ""
            }

    def get_statistics(self) -> str:
        """L·∫•y th·ªëng k√™ chi ti√™u"""
        if not self.transactions:
            return "Ch∆∞a c√≥ giao d·ªãch n√†o ∆∞·ª£c ghi nh·∫≠n..."
            
        total = sum(t['amount'] for t in self.transactions)
        items = [f"üìù {t['item']}: {t['amount']:,}ƒë" for t in self.transactions]
        
        return f"""üìä Th·ªëng k√™ chi ti√™u c·ªßa c·∫≠u:
{chr(10).join(items)}
------------------------
üí∞ T·ªïng c·ªông: {total:,}ƒë"""

    def analyze_spending_trends(self) -> str:
        """Ph√¢n t√≠ch xu h∆∞·ªõng chi ti√™u"""
        if not self.transactions:
            return "M√¨nh ch∆∞a c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch. H√£y ghi nh·∫≠n th√™m c√°c kho·∫£n chi ti√™u nh√©!"

        # Ph√¢n t√≠ch theo category
        category_totals = {}
        for trans in self.transactions:
            cat_name = trans['category']['name']
            category_totals[cat_name] = category_totals.get(cat_name, 0) + trans['amount']

        sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)
        
        # T·∫°o ph√¢n t√≠ch ƒë∆∞·ª£c c√° nh√¢n h√≥a
        response = f"üìä {self.personality.bot_name} ƒë√£ ph√¢n t√≠ch chi ti√™u c·ªßa c·∫≠u:\n\n"
        for cat_name, total in sorted_categories:
            response += f"{cat_name}: {total:,}ƒë\n"
        
        # Th√™m nh·∫≠n x√©t
        if sorted_categories:
            top_category = sorted_categories[0][0]
            response += f"\nüí° Nh·∫≠n x√©t: c·∫≠u chi ti√™u nhi·ªÅu nh·∫•t cho {top_category}. "
            if len(sorted_categories) > 1:
                second_category = sorted_categories[1][0]
                response += f"K·∫ø ƒë·∫øn l√† {second_category}."
        
        return response

    def get_tsundere_reaction(self, transaction: dict) -> str:
        """T·∫°o ph·∫£n ·ª©ng tsundere d·ª±a tr√™n lo·∫°i giao d·ªãch"""
        try:
            amount = transaction['amount']
            item = transaction['item']
            trans_type = transaction['type']  # INCOMING ho·∫∑c EXPENSE
            category = transaction['category']['name']  # L·∫•y t√™n category v·ªõi emoji
            
            # Debug log
            print(f"Processing transaction:")
            print(f"- Type: {trans_type}")
            print(f"- Category: {category}")
            print(f"- Amount: {amount}")
            print(f"- Item: {item}")

            # X√°c ƒë·ªãnh level d·ª±a v√†o amount v√† category
            if trans_type == "INCOMING":
                if category == "üíº L∆∞∆°ng":
                    if amount < 5000000:
                        level = "low"
                    elif amount < 15000000:
                        level = "medium"
                    else:
                        level = "high"
                elif category == "üéâ Ti·ªÅn th∆∞·ªüng":
                    if amount < 1000000:
                        level = "low"
                    elif amount < 5000000:
                        level = "medium"
                    else:
                        level = "high"
                elif category == "‚è∞ L√†m th√™m":
                    if amount < 500000:
                        level = "low"
                    elif amount < 2000000:
                        level = "medium"
                    else:
                        level = "high"
                else:  # OTHER
                    if amount < 1000000:
                        level = "low"
                    elif amount < 5000000:
                        level = "medium"
                    else:
                        level = "high"
            else:  # EXPENSE
                if category == "üç≤ ƒÇn u·ªëng":
                    if amount < 50000:
                        level = "low"
                    elif amount < 200000:
                        level = "medium"
                    else:
                        level = "high"
                elif category == "üõçÔ∏è Mua s·∫Øm":
                    if amount < 100000:
                        level = "low"
                    elif amount < 500000:
                        level = "medium"
                    else:
                        level = "high"
                elif category == "üé¨ Gi·∫£i tr√≠":
                    if amount < 100000:
                        level = "low"
                    elif amount < 300000:
                        level = "medium"
                    else:
                        level = "high"
                elif category == "üíñ T√¨nh y√™u":
                    if amount < 100000:
                        level = "low"
                    elif amount < 300000:
                        level = "medium"
                    else:
                        level = "high"
                else:  # OTHER
                    if amount < 100000:
                        level = "low"
                    elif amount < 500000:
                        level = "medium"
                    else:
                        level = "high"

            print(f"- Determined level: {level}")

            # L·∫•y reactions cho category c·ª• th·ªÉ ho·∫∑c fallback v·ªÅ OTHER
            reactions = self.personality.tsundere_reactions[trans_type].get(
                category,
                self.personality.tsundere_reactions[trans_type]["OTHER"]
            )
            
            # Ch·ªçn ng·∫´u nhi√™n m·ªôt reaction v√† format
            reaction = random.choice(reactions[level])
            formatted_reaction = reaction.format(amount=f"{amount:,}ƒë", item=item)
            
            print(f"- Selected reaction: {formatted_reaction}")
            return formatted_reaction
            
        except Exception as e:
            print(f"Error in get_tsundere_reaction: {str(e)}")
            # Fallback v·ªÅ reaction m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
            default_reaction = "H·ª´m... {amount} cho {item}... T-t·∫°m ƒë∆∞·ª£c! üí≠"
            try:
                return default_reaction.format(amount=f"{amount:,}ƒë", item=item)
            except:
                return "! C√≥ g√¨ ƒë√≥ kh√¥ng ƒë√∫ng r·ªìi! üò§"

    def remember_context(self, message: str, response: str) -> None:
        """Ghi nh·ªõ ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán"""
        self.conversation_history.append({
            "message": message,
            "response": response,
            "timestamp": datetime.now()
        })
        
        # HÔøΩÔøΩÔøΩc t·ª´ cu·ªôc tr√≤ chuy·ªán
        self.learn_from_conversation(message)

    def learn_from_conversation(self, message: str) -> None:
        """H·ªçc t·ª´ n·ªôi dung cu·ªôc tr√≤ chuy·ªán"""
        # H·ªçc v·ªÅ th√≥i quen chi ti√™u
        if "th∆∞·ªùng" in message or "hay" in message:
            words = message.lower().split()
            for i, word in enumerate(words):
                if word in ["th∆∞·ªùng", "hay"]:
                    if i + 1 < len(words):
                        self.conversation_context["common_transactions"][words[i+1]] = True

        # H·ªçc v·ªÅ s·ªü th√≠ch
        if "th√≠ch" in message or "gh√©t" in message:
            self.conversation_context["user_preferences"][message] = True

    def get_personalized_response(self, message: str) -> Optional[str]:
        """T·∫°o c√¢u tr·∫£ l·ªùi d·ª±a tr√™n ng·ªØ c·∫£nh v√† t√≠nh c√°ch"""
        message = message.lower()

        # X·ª≠ l√Ω d·ª±a tr√™n ng·ªØ c·∫£nh tr∆∞·ªõc ƒë√≥
        if self.conversation_context["last_topic"]:
            if "nh∆∞ v·∫≠y" in message or "th·∫ø" in message:
                return f"D·ª±a v√†o cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc, m√¨nh hi·ªÉu l√† c·∫≠u ƒëang n√≥i v·ªÅ {self.conversation_context['last_topic']}"

        # X·ª≠ l√Ω d·ª±a tr√™n s·ªü th√≠ch ƒë√£ h·ªçc ƒë∆∞·ª£c
        for pref in self.conversation_context["user_preferences"]:
            if pref in message:
                return f"M√¨nh nh·ªõ l√† c·∫≠u ƒë√£ t·ª´ng n√≥i v·ªÅ vi·ªác n√†y..."

        return None

